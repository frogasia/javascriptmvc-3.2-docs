c({"name": "jQuery.Model.List.static.update", "type": "function", "parents": ["jQuery.Model.List.static"], "comment": "<p>Update is used to update a set of model instances on the server.  By implementing \nupdate along with the rest of the [jquery.model.services service api], your models provide an abstract\nAPI for services.  </p>\n\n<p>The easist way to implement update is to just give it the url to put data to:</p>\n\n<pre><code>$.Model.List(\"Recipe\",{\n  update: \"PUT /thing/update/\"\n},{})\n</code></pre>\n\n<p>Or you can implement update manually like:</p>\n\n<pre><code>$.Model.List(\"Thing\",{\n  update : function(ids, attrs, success, error){\n       return $.ajax({\n          url: \"/thing/update/\",\n          success: success,\n          type: \"PUT\",\n          data: { ids: ids, attrs : attrs }\n          error: error\n       });\n  }\n})\n</code></pre>\n\n<p>Then you update models by calling the [jQuery.Model.List.prototype.update prototype update method].</p>\n\n<pre><code>listInstance.update({ name: \"Food\" })\n</code></pre>\n\n<p>By default, the request will PUT an array of ids to be updated and\nthe changed attributes of the model instances in the body of the Ajax request.</p>\n\n<pre><code>{ \n    ids: [5,10,20],\n    attrs: { \n        name: \"Food\" \n    } \n}\n</code></pre>\n\n<p>Your server should send back an object with any new attributes the model \nshould have.  For example if your server udpates the \"updatedAt\" property, it\nshould send back something like:</p>\n\n<pre><code>// PUT /recipes/4,25,20 { name: \"Food\" } -&gt;\n{\n  updatedAt : \"10-20-2011\"\n}\n</code></pre>", "params": {"ids": {"order": 0, "description": "<p>the ids of the model instance</p>", "name": "ids", "type": "Array", "optional": false}, "attrs": {"order": 1, "description": "<p>Attributes on the model instance</p>", "name": "attrs", "type": "Object", "optional": false}, "success": {"order": 2, "description": "<p>the callback function.  It optionally accepts \nan object of attribute / value pairs of property changes the client doesn't already \nknow about. For example, when you update a name property, the server might \nupdate other properties as well (such as updatedAt). The server should send \nthese properties as the response to updates.  Passing them to success will \nupdate the model instances with these properties.</p>", "name": "success", "type": "Function", "optional": false}, "error": {"order": 3, "description": "<p>a function to callback if something goes wrong.  </p>", "name": "error", "type": "Function", "optional": false}}, "src": "./jquery/model/list/list.js", "line": 260, "children": []})