c({"name": "jquerymx", "type": "page", "comment": "<p>jQueryMX is a collection of useful jQuery libraries that provide \nthe missing functionality necessary to \nimplement and organize large-scale jQuery applications. </p>\n\n<p>Every part of jQueryMX can be used stand-alone which keeps your \napp super light.  $.Model, $.View, and $.Controller are only 7kb minified and gzipped.  This\nincluds their $.String, $.Class, and destroyed-event dependencies.</p>\n\n<p>If you are using [steal], simply steal the plugin you need like:</p>\n\n<pre><code>steal('jquery/controller', function(){\n  $.Controller('Tabs');\n})\n</code></pre>\n\n<p>Or, use the [http://javascriptmvc.com/builder.html download builder] to select \nthe files you need.</p>\n\n<p>jQueryMX is divided into four core areas:</p>\n\n<ul>\n<li>DOM Helpers</li>\n<li>Language Helpers</li>\n<li>Special events</li>\n<li>Model, View, Controller and Class ( Read [mvc the walkthrough] )</li>\n</ul>\n\n<p>The following highlights jQueryMX's functionality.</p>\n\n<h2>DOM Helpers</h2>\n\n<p>[dom DOM helpers] extend jQuery with extra functionality for \nmanipulating the DOM. For example, [dimensions] lets you set the \nouter width and height of elements like:</p>\n\n<pre><code>$('#foo').outerWidth(500);\n</code></pre>\n\n<p>THe following are the other dom plugins:</p>\n\n<ul>\n<li>[jQuery.cookie Cookie] - Set and get cookie values.</li>\n<li>[jQuery.fixture Fixture] - Simulate Ajax responses.</li>\n<li>[jQuery.fn.closest Closest] - Use the open child selector in event delegation.</li>\n<li>[jQuery.fn.compare Compare] - Compare the location of two elements rapidly.</li>\n<li>[jQuery.fn.curStyles CurStyles] - Get multiple css properties quickly.</li>\n<li>[jQuery.fn.formParams FormParams] - Serializes a form into a JSON-like object.</li>\n<li>[jQuery.fn.selection Selection] - Gets or sets the current text selection.</li>\n<li>[jQuery.fn.within Within] - Returns elements that have a point within their boundaries.</li>\n<li>[jQuery.Range Range] - Text range utilities.</li>\n<li>[jQuery.route] - Routes for history-enabled ajax apps.</li>\n</ul>\n\n<h2>Special Events</h2>\n\n<p>jQueryMX comes packed with jQuery [specialevents special events] and event helpers.</p>\n\n<ul>\n<li>[jQuery.Drag Drag] - Delegatable drag events.</li>\n<li>[jQuery.Drop Drop] - Delegatable drop events.</li>\n<li>[jQuery.Hover Hover] - Delegatable hover events.</li>\n<li>[jQuery.event.special.destroyed Destroyed] - Know when an element is removed from the page.</li>\n<li>[jQuery.event.special.resize Resize] - Listen to resize events on any element.</li>\n<li>[jQuery.event.swipe Swipe] - Delegatable swipe events.</li>\n<li>[jQuery.Event.prototype.key Key] - Get the character from a key event.</li>\n<li>[jQuery.event.special.default Default] - Provide default behaviors for events.</li>\n<li>[jquery.event.pause Pause-Resume] - Pause and resume event propagation.</li>\n</ul>\n\n<h2>Language Helpers</h2>\n\n<p>Language helpers make it easy to perform various functions on\nJavaScript data.  </p>\n\n<ul>\n<li>[jQuery.Object Object] - compare objects and sets</li>\n<li>[jQuery.Observe Observe] - Listen to changes in JS Objects and Arrays</li>\n<li>[jQuery.String String] - String helpers</li>\n<li>[jQuery.toJSON toJSON] - create and convert JSON strings</li>\n<li>[jQuery.Vector Vector] - vector math</li>\n</ul>\n\n<h2>$.Class</h2>\n\n<p>[jQuery.Class $.Class] provides simple prototypal \ninheritance.  It's used by [jQuery.Controller $.Controller] and \n[jQuery.Model $.Model].</p>\n\n<pre><code>// create a Monster Class\n$.Class(\"Monster\",\n// static methods \n{\n\n  // a list of all monsters\n  monsters : []\n},\n// prototype methods\n{\n\n  // called when a new monster is created\n  init : function(name){\n\n    // stores a reference to the name\n    this.name = name;\n\n    // adds this monster to the collection of monsters\n    this.Class.monsters.push(this);\n  },\n\n  // a method on monsters\n  speak : function(){\n    alert(this.name + \" says hello.\");\n  }\n});\n\n// create a monster\nvar hydra = new Monster(\"hydra\");    \n\n// call a method on a monster\nhydra.speak();\n</code></pre>\n\n<h2>$.Model</h2>\n\n<p>[jQuery.Model $.Model] encapsulates the service and data layer.  The following connects to a JSON REST service\nand adds a helper to let us know if we can destroy a task:</p>\n\n<pre><code>$.Model(\"Task\",{\n  findAll : \"GET /tasks.json\",\n  findOne : \"GET /tasks/{id}.json\",\n  create  : \"POST /tasks.json\",\n  update  : \"PUT /tasks/{id}.json\",\n  destroy : \"DELETE /tasks/{id}.json\"\n},{\n  canDestroy : function(){\n    return this.acl.indexOf('w') &gt; -1\n  }\n});\n</code></pre>\n\n<p>Assuming '/tasks.json' returns a JSON array like ...</p>\n\n<pre><code>[{\n  \"id\"       : 1,\n  \"name\"     : \"take out trash\",\n  \"acl\"      : \"rw\",\n  \"createdAt\": 1303000731164 // April 16 2011\n},\n{\n  \"id\"       : 2,\n  \"name\"     : \"do the dishes\",\n  \"acl\"      : \"r\" ,\n  \"createdAt\": 1303087131164 // April 17 2011\n}]\n</code></pre>\n\n<p>... the following will retrieve all tasks from the server and \nthen destroy tasks that the user is able to destroy:</p>\n\n<pre><code>Task.findAll({}, function(tasks){\n  for(var i =0; i &lt; tasks.length; i++){\n\n    var task = tasks[i];\n\n    if( task.canDestroy() ){\n      task.destroy();\n    }\n  }\n});\n</code></pre>\n\n<p>Model has a number of other useful features such as:</p>\n\n<ul>\n  <li><p>Listening to [jquery.model.events events].</p>\n\n<pre><code class='javascript'>// listen to name changes on a task\ntask.bind(\"name\", function(ev, newName){\n   alert('task name = '+newName);\n});\n\n//change the task's name\ntask.attr('name', \"laundry\");\n\n//listen for Tasks being created:\nTask.bind(\"created\", function(ev, newTask){\n   // create newTask's html and add it to the page\n});</code></pre></li>\n<li><p>[jquery.model.typeconversion Converting] raw data into more useful objects.</p>\n\n<pre><code class='javascript'>$.Model('Task', {\n  convert  : {\n    'date' : function(raw){\n      return new Date(raw)\n    }\n  },\n  attributes : {\n    'createdAt' : 'date' \n  }\n},{});\n\nvar task = new Task({ createdAt : 1303087131164});\n\n// createdAt is now a date.\ntask.createdAt.getFullYear() // -> 2011</code></pre></li>\n<li><p>Methods and utilities on [jQuery.Model.List lists] of instances.</p>\n\n<pre><code class='javascript'>// define a task list\n$.Model.List('Task.List',{\n\n  // add a helper method to a collection of tasks\n  canDestroyAll : function(){\n\n    return this.grep(function(task){\n      return task.canDestroy();\n    }).length === this.length\n  }\n});\n\nTask.findAll({}, function(tasks){\n\n  //tasks is a Task.List\n  tasks.canDestroyAll() //-> boolean\n})</code></pre></li>\n<li><p>[http://api.jquery.com/category/deferred-object/ Deferreds]</p>\n\n<pre><code class='javascript'>// make 2 requests, and do something when they are \n// both complete\n\n$.when( Task.findAll(), People.findAll() )\n  .done(function(tasks, people){\n\n  // do something cool!\n})</code></pre></li>\n</ul>\n\n<h2>$.View</h2>\n\n<p>[jQuery.View $.View] is a template framework.  It allows \nyou to use different template engines in the same way.  </p>\n\n<p>The following requests tasks from the model, then\nloads a template at <code>\"task/views/tasks.ejs\"</code>, \nrenders it with tasks, and \ninserts the result in the <code>#tasks</code> element.</p>\n\n<pre><code>Task.findAll( {}, function(tasks){\n\n  $('#tasks').html( 'task/views/tasks.ejs', tasks );\n});\n</code></pre>\n\n<p><code>tasks.ejs</code> might look like:</p>\n\n<pre><code>&lt;% $.each(this, function(task){  %&gt;\n  &lt;li&gt;&lt;%= task.name %&gt;&lt;/li&gt;\n&lt;% }) %&gt;\n</code></pre>\n\n<p>$.View understands [http://api.jquery.com/category/deferred-object/ deferreds] so the following does the exact same thing!</p>\n\n<pre><code> $('#tasks').html( 'task/views/tasks.ejs', Task.findAll() );\n</code></pre>\n\n<p>Any template engine can be used with $.View.  JavaScriptMVC comes with:</p>\n\n<ul>\n<li>[jQuery.EJS]</li>\n<li>[Jaml]</li>\n<li>[Micro]</li>\n<li>[jQuery.tmpl]</li>\n</ul>\n\n<h2>$.Controller</h2>\n\n<p>[jQuery.Controller $.Controller] is a jQuery widget factory. The \nfollowing creates a <code>$.fn.list</code> [jquery.controller.plugin plugin] that writes \na message into an element:</p>\n\n<pre><code>$.Controller( \"List\", {\n  init: function( ) {\n    this.element.text( this.options.message );\n  }\n});\n\n// create the list\n$('#list').list({message: \"Hello World\"});\n</code></pre>\n\n<p>$.Controller lets you define [jQuery.Controller.static.defaults default options]:</p>\n\n<pre><code>$.Controller( \"List\", {\n  defaults: {\n    message : \"I am list\"\n  }\n},{\n  init: function( ) {\n    this.element.text( this.options.message );\n  }\n});\n\n// create's a list that writes \"I am list\"\n$('#list').list();\n</code></pre>\n\n<p>Controller's best feature is that it organizes your event handlers, and \nmakes [jquery.controller.listening binding and unbinding] event \nhandlers extremely easy. The following listens for clicks on an\n<code>LI</codE> elements and alerts the element's text:</p>\n\n<pre><code>$.Controller( \"TaskList\", {\n  init: function(){\n    // uses a view to render tasks\n    this.element.html( \"tasks.ejs\", Task.findAll() );\n  },\n  \"li click\": function(el){\n    alert( el.text() );\n  }\n});\n</code></pre>\n\n<p>Controller makes it easy to parameterize event binding.  The following \nlistens for tasks being created and inserts them into the list:</p>\n\n<pre><code>$.Controller( \"TaskList\", {\n  init: function( ) {\n    // uses a view to render tasks\n    this.element.html(\"tasks.ejs\", Task.findAll());\n  },\n  \"{Task} created\": function( Task, ev, newTask ) {\n    this.element.append( \"tasks.ejs\", [newTask] );\n  }\n});\n</code></pre>\n\n<p>Finally, this makes it very easy to create widgets that work with any model:</p>\n\n<pre><code>$.Controller( \"List\", {\n  init: function(){\n    // uses a view to render tasks\n    this.element.html( this.options.view, \n                       this.options.model.findAll( ));\n  },\n  \"{model} created\": function( Model, ev, instance ){\n    this.element.append( this.options.view, [instance] );\n  }\n});\n\n$(\"#tasks\").list({ model: Task, view: 'tasks.ejs' });\n$(\"#people\").list({model: Person, view: 'people.ejs' });\n</code></pre>", "title": "jQueryMX", "parents": ["index"], "order": 0, "description": "jQuery Model View Controller and extensions.", "src": "./jquery/jquerymx.md", "children": ["jQuery.Model", "jquerymx.lang", "specialevents", "jQuery.View", "jQuery.Controller"]})