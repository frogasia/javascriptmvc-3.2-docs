c({"name": "jQuery.event.special.resize", "type": "attribute", "parents": ["specialevents", "jQuery.event.special"], "comment": "<p>The resize event is useful for updating elements dimensions when a parent element\nhas been resized.  It allows you to only resize elements that need to be resized \nin the 'right order'.</p>\n\n<p>By listening to a resize event, you will be alerted whenever a parent \nelement has a <code>resize</code> event triggered on it.  For example:</p>\n\n<pre><code>$('#foo').bind('resize', function(){\n   // adjust #foo's dimensions\n})\n\n$(document.body).trigger(\"resize\");\n</code></pre>\n\n<h2>The 'Right Order'</h2>\n\n<p>When a control changes size, typically, you want only internal controls to have to adjust their\ndimensions.  Furthermore, you want to adjust controls from the 'outside-in', meaning\nthat the outermost control adjusts its dimensions before child controls adjust theirs.</p>\n\n<p>Resize calls resize events in exactly this manner.  </p>\n\n<p>When you trigger a resize event, it will propagate up the DOM until it reaches\nan element with the first resize event \nhandler.  There it will move the event in the opposite direction, calling the element's\nchildren's resize event handlers.</p>\n\n<p>If your intent is to call resize without bubbling and only trigger child element's handlers,\nuse the following:</p>\n\n<pre><code>$(\"#foo\").trigger(\"resize\", false);\n</code></pre>\n\n<h2>Stopping Children Updates</h2>\n\n<p>If your element doesn't need to change it's dimensions as a result of the parent element, it should\ncall ev.stopPropagation().  This will only stop resize from being sent to child elements of the current element.</p>", "src": "./jquery/event/resize/resize.js", "line": 17, "children": []})