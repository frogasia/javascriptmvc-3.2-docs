c({"name": "Document.around", "params": {"pointcut": {"description": "", "type": "", "optional": false, "order": 0, "name": "pointcut"}, "advice": {"description": "", "type": "", "optional": false, "order": 1, "name": "advice"}, "weaved.": {"order": 2, "description": "", "name": "weaved.", "type": "Map pointcut Definition of the point-cut to apply the advice. A point-cut is the definition of the object/s and method/s to be", "optional": false}, "one": {"order": 3, "description": "<pre><code>                   argument containing one function '.proceed()', the collection of arguments '.arguments', and the matched method name '.method'.\n</code></pre>", "name": "one", "type": "Function advice Function containing the code that will get called around the execution of the point-cut. This advice will be called with", "optional": false}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["Document"], "comment": "<p>Creates an advice 'around' the defined point-cut. This type of advice can control the point-cut method execution by calling\nthe functions '.proceed()' on the 'invocation' object, and also, can modify the arguments collection before sending them to the function call.\nThis function returns an array of weaved aspects (Function).</p>\n\n<p>@example jQuery.aop.around( {target: window, method: 'MyGlobalMethod'}, function(invocation) {\n               alert('# of Arguments: ' + invocation.arguments.length); \n               return invocation.proceed(); \n         } );\n@result Array<Function></p>\n\n<p>@example jQuery.aop.around( {target: String, method: 'indexOf'}, function(invocation) { \n               alert('Searching: ' + invocation.arguments[0] + ' on: ' + this); \n               return invocation.proceed(); \n         } );\n@result Array<Function></p>\n\n<p>@example jQuery.aop.around( {target: window, method: /Get(\\d+)/}, function(invocation) {\n               alert('Executing ' + invocation.method); \n               return invocation.proceed(); \n         } );\n@desc Matches all global methods starting with 'Get' and followed by a number.\n@result Array<Function></p>\n\n<p>@name around\n@option Object target Target object to be weaved. \n@option String method Name of the function to be weaved. Regex are supported, but not on built-in objects.\n@cat Plugins/General</p>", "attribute_type": "@type Array", "src": "./steal/rhino/env.js", "line": 6059, "children": []})