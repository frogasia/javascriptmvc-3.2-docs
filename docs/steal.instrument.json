c({"name": "steal.instrument", "type": "class", "comment": "<p>Instruments JavaScript code blocks.  As the code runs, a block counter object keeps track \nof which blocks of code were run per file.  This information can be used to determine code \ncoverage statistics.</p>\n\n<h2>Usage</h2>\n\n<p>To turn on instrumentation, simply load a page with the steal option instrument set to true.  One way \nto do this is to open any page with steal[instrument]=true in the URL, like \nhttp://localhost/mypage.html?steal[instrument]=true.</p>\n\n<h2>Ignoring files</h2>\n\n<p>If you want to tell steal.instrument to ignore certain directories, files, or file patterns, add a \nlist of patterns to the steal instrument param value.  This param accepts an array of strings which are used to ignore files.  For \nexample: http://localhost/mypage.html?steal[instrument]=jquery,*_test.js.</p>\n\n<p>The * is a wildcard character.  The above example would ignore any files in the jquery directory, along with \nany file ending in _test.js.  Ignored files are stolen normally, without any instrumentation.</p>\n\n<p>To ignore all JMVC and test directories, pass !jmvc steal[instrument]=!jmvc, which ignores \"jquery\",\"funcunit\",\"steal\",\"documentjs\",\"<em>\\/test\",\"</em>_test.js\", \"mxui\"</p>\n\n<p>To ignore nothing, pass true, like http://localhost/mypage.html?steal[instrument]=true</p>\n\n<h2>How it works</h2>\n\n<p>steal.instrument works by adding a custom JS converter.  When an instrumented file is stolen, it:</p>\n\n<ol>\n<li>Is loaded via AJAX (hence cross domain files are ignored, since the AJAX request would fail)</li>\n<li>The text from the file is parsed, using the JS parser written by Mihai Bazon for the [https://github.com/mishoo/UglifyJS UglifyJS project]</li>\n<li>The text from the file is rebuilt from the parse tree.  At the start of any block of code, a line like \n__s(\"foo.js\", 3) is added.  When this block runs, this function call will increment the counter for block 3 \nin foo.js.</li>\n<li>This text is then eval-ed in global scope.</li>\n</ol>\n\n<p>To make this as fast as possible, localStorage is used where possible.  Instrumented files are cached in \nlocalStorage with a hash representing their contents.  Next run, this cache is checked first.  If the file has changed, \nthe hash will change and invalidate the cache.  Otherwise, the cached file is eval-ed.</p>\n\n<p>If the app opens a popup window or iframe, these children frames will all be loaded with instrumentation turned on also. <br />\nEach instrumented file is stored in a global object on the opener window, so if children steal the same file, those files will \nuse the stored version.  This is useful for FuncUnit runs, where child apps are loaded multiple times.</p>\n\n<h2>Reporting coverage results</h2>\n\n<p>When you're ready to calculate results and show them, call steal.instrument.compileStats.  This function inspects all the block \ncounters, calculates statistics for each file and total statistics for the collection of all files.  Each file has its:</p>\n\n<ol>\n<li>src - not matching the real source because its rebuild from the parse tree</li>\n<li>linesUsed - an object representing which lines were run in the src.  Each key in the key-value map is a line number. <br />\nEach value is the counter for how many times that line was run.  Non-statements are skipped.</li>\n<li>lineCoverage - percent of lines run</li>\n<li>blockCoverage - percent of blocks run</li>\n<li>lines - number of total lines</li>\n<li>blocks - number of total blocks</li>\n</ol>\n\n<p>FuncUnit has a plugin in funcunit/coverage that uses these stats and builds a reporting view, showing \npercentages and which lines were run for each file.</p>\n\n<h2>Disclaimers</h2>\n\n<ul>\n<li>steal.instrument is very slow in Firefox, but very fast in Chrome.</li>\n<li>If you use steal.instrument with apps that steal inside a script tag, these scripts won't \nbe instrumented when running in Firefox (it works in Chrome).  The reason \nis the order in which this script is executed happens before steal/instrument can be loaded. <br />\nIf this is an important case, you can manually load the plugin yourself before any code.  An example of this:</li>\n</ul>\n\n<pre><code class='javascript'>&lt;script type='text/javascript'&gt;\n  steal('app', function(){\n       // code\n  })\n&lt;/script&gt;</code></pre>\n\n<ul>\n<li>Remote files (not on the same domain) are skipped because they can't be loaded via AJAX.</li>\n</ul>", "parents": ["stealjs"], "plugin": "steal/instrument", "test": "steal/instrument/qunit.html", "src": "./steal/instrument/instrument.js", "line": 0, "children": ["steal.instrument.compileStats"]})